{"version":3,"file":"static/js/794.af7dcd02.chunk.js","mappings":"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","sources":["../node_modules/react-datalist-input/src/index.tsx"],"sourcesContent":["import type {\n  PropsWithChildren,\n  PropsWithRef,\n  HTMLAttributes,\n  InputHTMLAttributes,\n  ReactNode,\n  CSSProperties,\n  RefObject,\n  MutableRefObject,\n  SetStateAction,\n  Dispatch,\n} from 'react';\nimport React, {\n  createContext,\n  forwardRef,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  useDeferredValue,\n  useId,\n} from 'react';\n\n/*\n * References:\n * [ARIA1.1#comboBox]: https://www.w3.org/TR/wai-aria-1.1/#combobox\n * [ARIA1.2#comboBox]: https://www.w3.org/TR/wai-aria-1.2/#combobox\n *\n * Low-level Components:\n * - ComboboxInput: The textbox input field\n * - Listbox: The container that holds the list of options\n * - ListboxOption: One listbox option\n * - Highlight: Highlighting of matching text of the listbox option\n *\n * High-level Components:\n * - Combobox: A container that you can pass all low-level components yourself (advanced use-cases)\n * - DatalistInput: A container that renders all low-level components for you (simple use-cases)\n */\n\n/*\n * \"Typically, the default state of a combobox is collapsed.\" [ARIA1.1#combobox]\n * If the developer does not manage the open state on its own, by default this component will collapse the listbox.\n * This ensures that the datalist input components (by default) matches the behavior of the native datalist element\n */\nconst DEFAULT_IS_EXPANDED = false;\n\nconst IS_PRODUCTION = process.env.NODE_ENV === 'production';\n\n/*\n * Utilities\n */\n\nconst contextRequiredWarning = (name: string) =>\n  `The ${name} component must be a child of Combobox. Please wrap the component inside Combobox to ensure that the required context is available.`;\n\n/**\n * This function is inspired by tiny-warning: https://github.com/alexreardon/tiny-warning\n */\nfunction assertWithWarning(condition: boolean, text: string): void {\n  // wrapping in production check for better dead code elimination\n  if (!IS_PRODUCTION) {\n    if (condition) {\n      return;\n    }\n\n    // check console for IE9 support which provides console\n    if (typeof console !== 'undefined') {\n      console.warn(text);\n    }\n\n    // Throwing an error and catching it immediately\n    // to improve debugging\n    // A consumer can use 'pause on caught exceptions'\n    // https://github.com/facebook/react/issues/4216\n    try {\n      throw Error(text);\n    } catch (x) {}\n  }\n}\n\n/**\n * Composes different event handlers into a single event handler.\n */\ntype HandleWith = <Event>(...fns: Array<((e: Event) => void) | undefined>) => (e: Event) => void;\nconst handleWith: HandleWith =\n  (...fns) =>\n  (e) =>\n    fns.forEach((fn) => fn && fn(e));\n\n/*\n * Hooks and context\n */\n\ntype ComboboxContext = {\n  contextAvailable: boolean; // Flag that context is available\n  listboxId?: string; // The element that describes the option list of the element. [ARIA1.1#combobox]\n  selectedItemId?: string; // The element that describes the selected option of the combobox.\n  isExpanded?: boolean;\n  currentInputValue?: string;\n};\n\nconst ComboboxContext = createContext<ComboboxContext>({\n  contextAvailable: true,\n  listboxId: '',\n  selectedItemId: '',\n  isExpanded: DEFAULT_IS_EXPANDED,\n  currentInputValue: '',\n});\n\nconst useComboboxContext = () => useContext(ComboboxContext);\n\n/**\n * Use this hook to control the open state and input value of the combobox.\n * Pass the properties down to the DataListInput component.\n */\nconst useComboboxControls = (params?: { isExpanded: boolean; initialValue?: string }) => {\n  const [isExpanded, setIsExpanded] = useStateRef(params?.isExpanded);\n  const [value, setValue] = useState(params?.initialValue || '');\n  return {\n    isExpanded,\n    value,\n    setIsExpanded,\n    setValue,\n  };\n};\n\n/**\n * An elegant way to style elements based on the current state of the component.\n * Inspired by react-router: https://v5.reactrouter.com/web/api/NavLink/classname-string-func\n */\ntype ClassNameFunction<Params> = (params: Params) => string;\ntype ClassName<Params> = HTMLAttributes<HTMLLIElement>['className'] | ClassNameFunction<Params>;\nfunction useClassNameStr<Params>(className: ClassName<Params>, params: Params) {\n  return useMemo(\n    () => (!className || typeof className === 'string' ? className : className(params)),\n    [params, className],\n  );\n}\n\ntype UseComboboxHelpersConfigParams = {\n  itemsRef: MutableRefObject<Item[]>;\n  listboxRef: RefObject<HTMLElement>;\n  comboboxInputRef: RefObject<HTMLInputElement>;\n  isExpandedRef: React.MutableRefObject<boolean>;\n  onSelect?: (item: Item) => void;\n  setIsExpanded?: (isExpanded: boolean) => void;\n  setValue?: (value: string) => void;\n  setSelectedItem?: (item: Item) => void;\n};\n\n/**\n * The helpers returned by this hook can be used\n * to construct a custom Combobox behavior to your liking.\n * Wrap the low-level components in the Combobox component\n * and pass the helpers down if you need them.\n */\nfunction useComboboxHelpers({\n  itemsRef,\n  listboxRef,\n  comboboxInputRef,\n  onSelect,\n  isExpandedRef,\n  setIsExpanded,\n  setValue,\n  setSelectedItem,\n}: UseComboboxHelpersConfigParams) {\n  /**\n   * onChange callback for input field\n   */\n  const handleChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      if (setValue) setValue(e.currentTarget.value);\n      if (setIsExpanded) setIsExpanded(true);\n    },\n    [setValue, setIsExpanded],\n  );\n\n  /**\n   * onFocus callback for input field\n   */\n  const expandOnFocus = useCallback(() => {\n    if (!isExpandedRef.current && setIsExpanded) setIsExpanded(true);\n  }, [setIsExpanded]);\n\n  const handleCloseDatalist = useCallback(() => {\n    if (isExpandedRef.current && setIsExpanded) setIsExpanded(false);\n  }, [setIsExpanded]);\n\n  /**\n   * onKeyDown/onKeyUp callback for window\n   */\n  const closeOnEscape = useCallback((e: KeyboardEvent) => {\n    if (e.key === 'Escape') handleCloseDatalist();\n  }, []);\n\n  /**\n   * onClick callback for window\n   */\n  const handleClickOutside = useCallback(\n    (e: MouseEvent) => {\n      if (!comboboxInputRef.current || !listboxRef.current) return;\n      const targetElement = e.target;\n      if (\n        !targetElement ||\n        (!listboxRef.current.contains(targetElement as HTMLElement) && targetElement !== comboboxInputRef.current)\n      ) {\n        handleCloseDatalist();\n      }\n    },\n    [handleCloseDatalist],\n  );\n\n  /**\n   * onFocus callback for window\n   */\n  const handleFocusOutside = useCallback(() => {\n    if (!comboboxInputRef.current || !listboxRef.current) return;\n    const activeElement = document.activeElement;\n    if (!activeElement || (!listboxRef.current.contains(activeElement) && activeElement !== comboboxInputRef.current)) {\n      handleCloseDatalist();\n    }\n  }, [handleCloseDatalist]);\n\n  /**\n   * Callback for item selection (enter/click)\n   */\n  const handleSelect = useCallback(\n    (item: Item) => {\n      // return focus to input field after selection\n      if (comboboxInputRef.current) comboboxInputRef.current.focus();\n      if (setValue) setValue(item.value);\n      if (setIsExpanded) setIsExpanded(false);\n      if (setSelectedItem) setSelectedItem(item);\n      if (onSelect) onSelect(item); // onSelect at last to allow override of previous state changes\n    },\n    [setValue, onSelect, setIsExpanded, setSelectedItem],\n  );\n\n  /**\n   * keyDown callback for input field\n   */\n  const handleKeyDownOnInput = useCallback(\n    (e: React.KeyboardEvent<HTMLInputElement>) => {\n      // Control+Option+Space is used by VoiceOver on Mac to open the menu\n      const isControlOptionSpace = e.code === 'Space' && e.ctrlKey && e.altKey;\n      const shouldVisitItems = e.key === 'ArrowDown' || isControlOptionSpace;\n      if (!listboxRef.current || !shouldVisitItems) return;\n      if (isControlOptionSpace) e.preventDefault();\n      if (isExpandedRef.current) {\n        const firstOption = listboxRef.current.firstElementChild as HTMLLIElement | null;\n        if (firstOption && typeof firstOption.focus === 'function') firstOption.focus();\n      } else if (setIsExpanded) {\n        setIsExpanded(true);\n        // wait for next tick (render)\n        window.setTimeout(() => {\n          if (!listboxRef.current) return;\n          const firstOption = listboxRef.current.firstElementChild as HTMLLIElement | null;\n          if (firstOption && typeof firstOption.focus === 'function') firstOption.focus();\n        });\n      }\n    },\n    [setIsExpanded],\n  );\n\n  /**\n   * keyDown callback for list element (listbox option)\n   * Uses keyDown instead of keyUp to support \"long-press\" to quickly navigate through list\n   */\n  const handleKeyDownOnListboxOption = useCallback(\n    (e: React.KeyboardEvent<HTMLLIElement>) => {\n      if (!itemsRef.current) return;\n      const item = itemsRef.current.find((item) => item.id === e.currentTarget.id);\n      if (!item) return;\n      if (e.key === 'Enter') return handleSelect(item); // Enter should act as Click. This will also submit a one input form correctly with the latest value.\n      if (!listboxRef.current || e.key === 'Escape' || e.key === 'Tab' || e.key === 'Shift') return; // Do nothing on meta keys\n\n      // Used for navigation\n      if (e.key === 'ArrowDown' || e.key === 'ArrowUp' || e.key === 'Alt') {\n        e.preventDefault(); // prevent safari from doing crazy text selection things\n        let nextNode: Element | null = null;\n        if (e.key === 'ArrowDown' || e.key === 'Alt') {\n          nextNode = e.currentTarget.nextElementSibling || listboxRef.current.firstElementChild;\n        } else {\n          nextNode = e.currentTarget.previousElementSibling || listboxRef.current.lastElementChild;\n        }\n\n        if (!nextNode) return;\n        const nextOption = nextNode as HTMLLIElement;\n        if (nextOption && typeof nextOption.focus === 'function') nextOption.focus();\n        return;\n      }\n\n      // Anything else should go to the input field\n      if (!comboboxInputRef.current) return;\n      comboboxInputRef.current.focus();\n      comboboxInputRef.current.dispatchEvent(new KeyboardEvent('keydown', { key: e.key }));\n    },\n    [handleSelect],\n  );\n\n  return {\n    closeOnEscape,\n    handleClickOutside,\n    handleFocusOutside,\n    handleChange,\n    expandOnFocus,\n    handleSelect,\n    handleKeyDownOnInput,\n    handleKeyDownOnListboxOption,\n  };\n}\n\n/*\n * Low-level components\n */\n\ntype ComboboxInputProps = Omit<InputHTMLAttributes<HTMLInputElement>, 'value'> & {\n  value?: string;\n};\n\n/**\n * The textbox input field.\n * Does currently not implement aria-activedescendant which is not obligatory for datalist input components.\n * Autocomplete off to prevent browser autocomplete from interfering with our own; can be overridden with props.\n */\nconst ComboboxInput = forwardRef<HTMLInputElement, PropsWithRef<ComboboxInputProps>>(\n  ({ value, ...props }, forwardedRef) => {\n    const { contextAvailable, listboxId, isExpanded } = useComboboxContext();\n    assertWithWarning(contextAvailable, contextRequiredWarning(ComboboxInput.name));\n\n    return (\n      <input\n        autoComplete=\"off\"\n        {...props}\n        ref={forwardedRef}\n        value={value}\n        type=\"text\"\n        role=\"combobox\"\n        aria-autocomplete=\"list\"\n        aria-haspopup=\"listbox\"\n        aria-expanded={isExpanded}\n        aria-controls={listboxId}\n      />\n    );\n  },\n);\nComboboxInput.displayName = 'ComboboxInput';\n\ntype HighlightProps = HTMLAttributes<HTMLElement> & {\n  currentInput?: string;\n  as?: 'mark' | 'span';\n};\n\n/**\n * Optional highlight component for the listbox option text.\n * Should be wrapped by ListboxOption. Provide ListBoxOption an aria-label to ensure accessibility, especially if using mark.\n */\nconst Highlight: React.FC<PropsWithChildren<HighlightProps>> = ({\n  children,\n  currentInput = '',\n  as = 'mark',\n  ...props\n}) => {\n  const markedChildren = useMemo(() => {\n    if (typeof children !== 'string') {\n      return children;\n    }\n    const index = children.toLowerCase().indexOf(currentInput.toLowerCase());\n    const inputLength = currentInput.length;\n    if (index === -1 || !inputLength) {\n      return children;\n    }\n    return (\n      <>\n        {children.substring(0, index)}\n        {as === 'mark' ? (\n          <mark {...props}>{children.substring(index, index + inputLength)}</mark>\n        ) : (\n          <span {...props}>{children.substring(index, index + inputLength)}</span>\n        )}\n        {children.substring(index + inputLength, children.length)}\n      </>\n    );\n  }, [currentInput, children]);\n\n  return <>{markedChildren}</>;\n};\n\ntype ListboxOptionClassNameParams = { isSelected: boolean };\ntype ListboxOptionProps = Omit<HTMLAttributes<HTMLLIElement>, 'className'> & {\n  className?: ClassName<ListboxOptionClassNameParams>;\n};\n\n/**\n * One listbox option.\n */\nconst ListboxOption = forwardRef<HTMLLIElement, PropsWithRef<ListboxOptionProps>>(\n  ({ children, id, className, ...props }, forwardedRef) => {\n    const { selectedItemId } = useComboboxContext();\n    const classNameStr = useClassNameStr<ListboxOptionClassNameParams>(className, {\n      isSelected: !!id && id === selectedItemId,\n    });\n\n    return (\n      <li {...props} ref={forwardedRef} id={id} className={classNameStr} role=\"option\">\n        {children}\n      </li>\n    );\n  },\n);\nListboxOption.displayName = 'ListboxOption';\n\ntype ListboxProps = HTMLAttributes<HTMLUListElement>;\n\n/**\n * The combobox popup list.\n */\nconst Listbox = forwardRef<HTMLUListElement, PropsWithRef<ListboxProps>>(({ children, ...props }, forwardedRef) => {\n  const { contextAvailable, listboxId, isExpanded } = useComboboxContext();\n  assertWithWarning(contextAvailable, contextRequiredWarning(Listbox.name));\n  const isExpandedRef = useRef(isExpanded);\n  const [hasExpanded, setHasExpanded] = useState(false);\n\n  useEffect(() => {\n    if (!isExpanded) {\n      setHasExpanded(false);\n    } else if (isExpanded && isExpanded !== isExpandedRef.current) {\n      setHasExpanded(true);\n    }\n    isExpandedRef.current = isExpanded; // drag pointer to the old value\n  }, [isExpanded]);\n\n  // TODO https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-live instead of title\n  return (\n    <ul\n      {...props}\n      ref={forwardedRef}\n      id={listboxId}\n      role=\"listbox\"\n      aria-live={hasExpanded ? props['aria-live'] || 'polite' : 'off'}\n    >\n      {children}\n    </ul>\n  );\n});\nListbox.displayName = 'Listbox';\n\n/*\n * Combobox - high-level component\n */\n\ntype ComboboxProps = {\n  listboxId?: ComboboxContext['listboxId'];\n  selectedItemId?: ComboboxContext['selectedItemId'];\n  isExpanded?: ComboboxContext['isExpanded'];\n  currentInputValue?: ComboboxContext['currentInputValue'];\n};\n\ntype Combobox = React.FC<PropsWithChildren<ComboboxProps>> & {\n  ComboboxInput: typeof ComboboxInput;\n  Listbox: typeof Listbox;\n  ListboxOption: typeof ListboxOption;\n  Highlight: typeof Highlight;\n};\n\n/**\n * A container that you can pass all low-level components yourself for advanced use-cases.\n * The Combobox provides the context for the combobox low-level components.\n */\nconst Combobox: Combobox = ({ currentInputValue, listboxId, selectedItemId, isExpanded = true, children }) => {\n  const id = useId();\n  return (\n    <ComboboxContext.Provider\n      value={{ currentInputValue, contextAvailable: true, listboxId: listboxId || id, selectedItemId, isExpanded }}\n    >\n      {children}\n    </ComboboxContext.Provider>\n  );\n};\n\nCombobox.ComboboxInput = ComboboxInput;\nCombobox.Listbox = Listbox;\nCombobox.ListboxOption = ListboxOption;\nCombobox.Highlight = Highlight;\n\n/*\n * DatalistInput - high-level component & its utilities\n */\n\n/**\n * Internal hook used to create a ref for a state value to allow access to the state value without triggering a re-render.\n */\nfunction useStateRef<S>(initialState: S): [S, (newState: S) => void, React.MutableRefObject<S>] {\n  const [state, setState] = useState(initialState);\n  const ref = useRef(initialState);\n  const setStateRef = (newState: S) => {\n    setState(newState);\n    ref.current = newState;\n  };\n  return [state, setStateRef, ref];\n}\n\n/**\n * Internal hook used to manipulate the value of the input field.\n */\nconst useInternalValue = (\n  value?: string,\n  setValue?: (str: string) => void | Dispatch<SetStateAction<string>>,\n): [string, (str: string) => void] => {\n  const [internalValue, setInternalValue] = useState(value || '');\n  const setValues = useCallback(\n    (newValue: string) => {\n      if (setValue) {\n        setValue(newValue);\n      } else {\n        setInternalValue(newValue);\n      }\n    },\n    [setValue],\n  );\n\n  useEffect(() => {\n    setInternalValue(value || '');\n  }, [value]);\n\n  return [internalValue, setValues];\n};\n\n/**\n * Internal hook to keep track of the selected item.\n */\nfunction useInternalSelectedItem(item?: Item): [Item | undefined, (item: Item) => void] {\n  const [selectedItem, setSelectedItem] = useState(item);\n\n  useEffect(() => {\n    setSelectedItem(item);\n  }, [item]);\n\n  return [selectedItem, setSelectedItem];\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype Item = any & {\n  id: string;\n  value: string; // Used for filtering. Used for displaying and highlighting if node not provided.\n  node?: ReactNode; // Used for display.\n  label?: string; // If provided, will be used as the aria-label on the list element. If not provided, value will be used instead.\n};\n\ntype Filter = (items: Item[], value?: ComboboxInputProps['value']) => Item[];\n\n/**\n * Alternative function for matching the current input value (needle) and the values of the items array.\n * Returns true if item.value is not of type string (all items will be displayed and a custom filter must be used).\n */\nconst startsWithValueFilter: Filter = (items, value = '') =>\n  items.filter((item) =>\n    typeof item.value === 'string' ? item.value.substring(0, value.length).toLowerCase() === value.toLowerCase() : true,\n  );\n\n/**\n * Default function for matching the current input value (needle) and the values of the items array.\n * Returns true if item.value is not of type string (all items will be displayed and a custom filter must be used).\n */\nconst includesValueFilter: Filter = (items, value = '') =>\n  items.filter((item) =>\n    typeof item.value === 'string' ? item.value.toLowerCase().includes(value.toLocaleLowerCase()) : true,\n  );\n\nfunction useFilters(\n  items: Item[],\n  value: ComboboxInputProps['value'],\n  filters: Filter[],\n): [Item[], MutableRefObject<Item[]>] {\n  const filteredRef = useRef<Item[]>(items);\n  const filtered = useMemo(\n    () => filters.reduce((currentItems, filter) => filter(currentItems, value), items),\n    [items, filters, value],\n  );\n\n  useEffect(() => {\n    filteredRef.current = filtered;\n  }, [filtered]);\n\n  return [filtered, filteredRef];\n}\n\ntype LabelOptionProps =\n  | {\n      showLabel?: false;\n      label: string;\n    }\n  | {\n      showLabel?: true;\n      label: ReactNode;\n    };\n\ntype LabelProps = HTMLAttributes<HTMLLabelElement>;\n\n// eslint-disable-next-line @typescript-eslint/ban-types\ntype DatalistInputProps = LabelOptionProps &\n  Omit<HTMLAttributes<HTMLDivElement>, 'onSelect'> & {\n    items: Item[];\n    selectedItem?: Item;\n    value?: ComboboxInputProps['value'];\n    setValue?: UseComboboxHelpersConfigParams['setValue'];\n    onSelect?: UseComboboxHelpersConfigParams['onSelect'];\n    isExpanded?: ComboboxContext['isExpanded'];\n    setIsExpanded?: UseComboboxHelpersConfigParams['setIsExpanded'];\n    placeholder?: ComboboxInputProps['placeholder'];\n    filters?: Filter[];\n    inputProps?: ComboboxInputProps;\n    labelProps?: LabelProps;\n    listboxProps?: ListboxProps;\n    listboxOptionProps?: ListboxOptionProps;\n    highlightProps?: HighlightProps;\n    isExpandedClassName?: string;\n    isCollapsedClassName?: string;\n    isExpandedStyle?: CSSProperties;\n    isCollapsedStyle?: CSSProperties;\n  };\n\n/**\n * DatalistInput implements all lower-level components for you and provides a simple API for controlling the combobox.\n * Note: Use the useComboboxControls hook to control the value and expanded state of the combobox.\n * DatalistInput implements the ARIA1.2#comboBox specification, including keyboard navigation with ArrowUp and ArrowDown.\n * DatalistInput does currently not implement aria-activedescendant but shifts the focus to the listbox options on ArrowUp and ArrowDown.\n * Note: tabIndex of all listbox options is set to -1 to allow the user to use tab or shift tab to jump out of the datalist without the need to tab through all options.\n */\nconst DatalistInput = forwardRef<HTMLDivElement, PropsWithRef<DatalistInputProps>>(\n  (\n    {\n      label,\n      showLabel = true,\n      items,\n      selectedItem,\n      value,\n      setValue,\n      onSelect,\n      placeholder,\n      isExpanded = DEFAULT_IS_EXPANDED,\n      setIsExpanded,\n      filters = [includesValueFilter],\n      inputProps,\n      labelProps,\n      listboxOptionProps,\n      listboxProps,\n      highlightProps,\n      isExpandedClassName = '',\n      isCollapsedClassName = '',\n      isExpandedStyle,\n      isCollapsedStyle,\n      ...props\n    },\n    forwardedRef,\n  ) => {\n    const [internalIsExpanded, setInternalIsExpanded, isExpandedRef] = useStateRef(isExpanded);\n    const [internalValue, setInternalValue] = useInternalValue(value, setValue);\n    const internalTextboxId = useId();\n    const debounceValue = useDeferredValue(internalValue);\n    const [filteredItems, filteredItemsRef] = useFilters(items, debounceValue, filters);\n    const listboxRef = useRef<HTMLUListElement>(null);\n    const comboboxInputRef = useRef<HTMLInputElement>(null);\n    const [internalSelectedItem, setSelectedItem] = useInternalSelectedItem(selectedItem);\n\n    const setIsExpandedStates = useCallback(\n      (state: boolean) => (setIsExpanded ? setIsExpanded(state) : setInternalIsExpanded(state)),\n      [setIsExpanded],\n    );\n\n    const {\n      handleClickOutside,\n      handleFocusOutside,\n      closeOnEscape,\n      handleChange,\n      expandOnFocus,\n      handleSelect,\n      handleKeyDownOnInput,\n      handleKeyDownOnListboxOption,\n    } = useComboboxHelpers({\n      listboxRef,\n      comboboxInputRef,\n      isExpandedRef,\n      setValue: setInternalValue,\n      onSelect,\n      itemsRef: filteredItemsRef,\n      setIsExpanded: setIsExpandedStates,\n      setSelectedItem,\n    });\n\n    useEffect(() => {\n      setInternalIsExpanded(isExpanded);\n    }, [isExpanded]);\n\n    useEffect(() => {\n      // separate useEffect so we don't re-run it twice with each dependency change\n      window.addEventListener('click', handleClickOutside);\n      window.addEventListener('keyup', closeOnEscape);\n      return () => {\n        window.removeEventListener('click', handleClickOutside);\n        window.removeEventListener('keyup', closeOnEscape);\n      };\n    }, [handleClickOutside]);\n\n    useEffect(() => {\n      // separate useEffect so we don't re-run it twice with each dependency change\n      window.addEventListener('focusin', handleFocusOutside);\n      return () => {\n        window.removeEventListener('focusin', handleFocusOutside);\n      };\n    }, [handleFocusOutside]);\n\n    return (\n      <div {...props} ref={forwardedRef} className={`react-datalist-input__container ${props.className}`}>\n        <Combobox\n          listboxId={listboxProps?.id}\n          selectedItemId={internalSelectedItem?.id}\n          isExpanded={internalIsExpanded}\n          currentInputValue={internalValue}\n        >\n          {showLabel && (\n            <label\n              {...labelProps}\n              className={`react-datalist-input__label ${labelProps?.className}`}\n              htmlFor={inputProps?.id || internalTextboxId}\n            >\n              {label}\n            </label>\n          )}\n          <ComboboxInput\n            {...inputProps}\n            ref={comboboxInputRef}\n            id={inputProps?.id || internalTextboxId}\n            placeholder={placeholder}\n            value={internalValue}\n            onClick={handleWith(expandOnFocus, inputProps?.onClick)}\n            onFocus={handleWith(expandOnFocus, inputProps?.onFocus)}\n            onChange={handleWith(handleChange, inputProps?.onChange)}\n            onKeyDown={handleWith(handleKeyDownOnInput, inputProps?.onKeyDown)}\n            aria-label={!showLabel && typeof label === 'string' ? label : undefined}\n            className={`react-datalist-input__textbox ${inputProps?.className}`}\n          />\n          {((filteredItems.length && internalIsExpanded) || isCollapsedClassName || isCollapsedStyle) && (\n            <Listbox\n              {...listboxProps}\n              ref={listboxRef}\n              aria-hidden={internalIsExpanded}\n              className={`react-datalist-input__listbox ${\n                internalIsExpanded ? isExpandedClassName : isCollapsedClassName\n              } ${listboxProps?.className || ''}`}\n              style={{\n                ...(internalIsExpanded ? isExpandedStyle : isCollapsedStyle),\n                ...listboxProps?.style,\n              }}\n            >\n              {filteredItems.map((item) => (\n                <ListboxOption\n                  {...listboxOptionProps}\n                  aria-label={item.label || item.value}\n                  key={item.id}\n                  id={item.id}\n                  tabIndex={-1}\n                  onClick={handleWith(() => handleSelect(item), listboxOptionProps?.onClick)}\n                  onKeyDown={handleWith(handleKeyDownOnListboxOption, listboxOptionProps?.onKeyDown)}\n                  className={`react-datalist-input__listbox-option ${listboxOptionProps?.className}`}\n                >\n                  <Highlight {...highlightProps} currentInput={internalValue}>\n                    {item.node || item.value}\n                  </Highlight>\n                </ListboxOption>\n              ))}\n            </Listbox>\n          )}\n        </Combobox>\n      </div>\n    );\n  },\n);\nDatalistInput.displayName = 'DatalistInput';\n\nexport type {\n  DatalistInputProps,\n  ComboboxProps,\n  ComboboxInputProps,\n  ListboxProps,\n  ListboxOptionProps,\n  HighlightProps,\n  UseComboboxHelpersConfigParams,\n  Item,\n  Filter,\n};\n\nexport {\n  Combobox,\n  DatalistInput,\n  startsWithValueFilter,\n  includesValueFilter,\n  useFilters,\n  useComboboxContext,\n  useComboboxControls,\n  useComboboxHelpers,\n};\n\nexport default DatalistInput;\n"],"names":["contextRequiredWarning","name","concat","assertWithWarning","condition","text","handleWith","fns","_i","arguments","length","e","forEach","fn","ComboboxContext","createContext","contextAvailable","listboxId","selectedItemId","isExpanded","currentInputValue","useComboboxContext","useContext","ComboboxInput","forwardRef","_a","forwardedRef","value","props","__rest","_b","React","__assign","autoComplete","ref","type","role","displayName","Highlight","children","currentInput","_c","as","markedChildren","useMemo","index","toLowerCase","indexOf","inputLength","substring","ListboxOption","id","className","classNameStr","params","useClassNameStr","isSelected","Listbox","isExpandedRef","useRef","useState","hasExpanded","setHasExpanded","useEffect","current","Combobox","useId","Provider","useStateRef","initialState","state","setState","newState","includesValueFilter","items","filter","item","includes","toLocaleLowerCase","DatalistInput","label","showLabel","selectedItem","setValue","onSelect","placeholder","setIsExpanded","_d","filters","inputProps","labelProps","listboxOptionProps","listboxProps","highlightProps","_e","isExpandedClassName","_f","isCollapsedClassName","isExpandedStyle","isCollapsedStyle","_g","internalIsExpanded","setInternalIsExpanded","_h","internalValue","setInternalValue","setValues","useCallback","newValue","useInternalValue","internalTextboxId","_j","filteredRef","filtered","reduce","currentItems","useFilters","useDeferredValue","filteredItems","filteredItemsRef","listboxRef","comboboxInputRef","_k","setSelectedItem","useInternalSelectedItem","internalSelectedItem","_l","itemsRef","handleChange","currentTarget","expandOnFocus","handleCloseDatalist","closeOnEscape","key","handleClickOutside","targetElement","target","contains","handleFocusOutside","activeElement","document","handleSelect","focus","handleKeyDownOnInput","isControlOptionSpace","code","ctrlKey","altKey","shouldVisitItems","preventDefault","firstOption","firstElementChild","window","setTimeout","handleKeyDownOnListboxOption","find","dispatchEvent","KeyboardEvent","nextNode","nextElementSibling","previousElementSibling","lastElementChild","nextOption","useComboboxHelpers","addEventListener","removeEventListener","htmlFor","onClick","onFocus","onChange","onKeyDown","undefined","style","map","tabIndex","node"],"sourceRoot":""}